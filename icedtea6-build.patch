--- openjdk/hotspot/src/share/vm/runtime/interfaceSupport.hpp.org	2012-02-11 15:04:57.730027726 +0100
+++ openjdk/hotspot/src/share/vm/runtime/interfaceSupport.hpp	2012-02-11 15:05:11.420335355 +0100
@@ -46,7 +46,7 @@
   }
 };
 
-// InterfaceSupport provides functionality used by the __LEAF and __ENTRY
+// InterfaceSupport provides functionality used by the __JDK_LEAF and __ENTRY
 // macros. These macros are used to guard entry points into the VM and
 // perform checks upon leave of the VM.
 
@@ -391,7 +391,7 @@
 
 // LEAF routines do not lock, GC or throw exceptions
 
-#define __LEAF(result_type, header)                                  \
+#define __JDK_LEAF(result_type, header)                                  \
   TRACE_CALL(result_type, header)                                    \
   debug_only(NoHandleMark __hm;)                                     \
   /* begin of body */
@@ -427,7 +427,7 @@
 
 #define IRT_LEAF(result_type, header)                                \
   result_type header {                                               \
-    __LEAF(result_type, header)                                      \
+    __JDK_LEAF(result_type, header)                                      \
     debug_only(No_Safepoint_Verifier __nspv(true);)
 
 
@@ -461,7 +461,7 @@
 
 #define JRT_LEAF(result_type, header)                                \
   result_type header {                                               \
-  __LEAF(result_type, header)                                        \
+  __JDK_LEAF(result_type, header)                                        \
   debug_only(JRT_Leaf_Verifier __jlv;)
 
 
@@ -521,7 +521,7 @@
   result_type JNICALL header {                                \
     JavaThread* thread=JavaThread::thread_from_jni_environment(env); \
     assert( !VerifyJNIEnvThread || (thread == Thread::current()), "JNIEnv is only valid in same thread"); \
-    __LEAF(result_type, header)
+    __JDK_LEAF(result_type, header)
 
 
 // Close the routine and the extern "C"
@@ -562,7 +562,7 @@
 extern "C" {                                                         \
   result_type JNICALL header {                                       \
     VM_Exit::block_if_vm_exited();                                   \
-    __LEAF(result_type, header)
+    __JDK_LEAF(result_type, header)
 
 
 #define JVM_END } }
--- openjdk/jdk/src/share/native/sun/awt/splashscreen/splashscreen_png.c.org	2012-02-11 15:20:11.416431939 +0100
+++ openjdk/jdk/src/share/native/sun/awt/splashscreen/splashscreen_png.c	2012-02-11 15:26:24.905098592 +0100
@@ -36,7 +36,7 @@
 {
     png_uint_32 check;
 
-    SplashStream * stream = (SplashStream*)png_ptr->io_ptr;
+    SplashStream * stream = (SplashStream*)png_get_io_ptr(png_ptr);
     check = stream->read(stream, data, length);
     if (check != length)
         png_error(png_ptr, "Read Error");
@@ -71,12 +71,12 @@
         goto done;
     }
 
-    if (setjmp(png_ptr->jmpbuf)) {
+    if (setjmp(png_jmpbuf(png_ptr))) {
         goto done;
     }
 
-    png_ptr->io_ptr = io_ptr;
-    png_ptr->read_data_fn = read_func;
+    png_get_io_ptr(png_ptr);
+    png_set_read_fn(png_ptr, NULL, read_func);
 
     png_set_sig_bytes(png_ptr, SIG_BYTES);      /* we already read the 8 signature bytes */
 
